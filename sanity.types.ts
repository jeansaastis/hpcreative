// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Timeline = {
  _type: 'timeline'
  items?: Array<{
    title?: string
    milestones?: Array<
      {
        _key: string
      } & Milestone
    >
    _type: 'item'
    _key: string
  }>
}

export type Milestone = {
  _type: 'milestone'
  title?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  tags?: Array<string>
  duration?: Duration
}

export type CvSection = {
  _type: 'cvSection'
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type MediaItem = {
  _type: 'mediaItem'
  title?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  description?: string
  url?: string
}

export type Skill = {
  _type: 'skill'
  title?: string
}

export type Testimonial = {
  _id: string
  _type: 'testimonial'
  _createdAt: string
  _updatedAt: string
  _rev: string
  quote?: string
  author?: string
  role?: string
  portrait?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type BlogPost = {
  _id: string
  _type: 'blogPost'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  coverImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  publishedAt?: string
  overview?: string
  publisher?: string
  tags?: Array<string>
  externalUrl?: string
  cardVariant?: 'standard' | 'imageLink'
  body?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  overview?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: null
    level?: number
    _type: 'block'
    _key: string
  }>
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | ({
        _key: string
      } & Timeline)
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        alt?: string
        _type: 'image'
        _key: string
      }
  >
}

export type Duration = {
  _type: 'duration'
  start?: string
  end?: string
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  logoLight?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  logoDark?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  linkedinUrl?: string
  menuItems?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'home'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
  >
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type Home = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  overview?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  hero?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'heroSection'
  }
  skills?: Array<
    {
      _key: string
    } & Skill
  >
  mediaGallery?: Array<
    {
      _key: string
    } & MediaItem
  >
  cvSection?: {
    content?: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal'
      listItem?: never
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }>
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }
  testimonials?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'testimonial'
  }>
  blogPosts?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'blogPost'
  }>
}

export type HeroSection = {
  _id: string
  _type: 'heroSection'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  body?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | Timeline
  | Milestone
  | CvSection
  | MediaItem
  | Skill
  | Testimonial
  | BlogPost
  | Page
  | Duration
  | Settings
  | Home
  | HeroSection
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: homePageQuery
// Query: *[_type == "home"][0]{    _id,    _type,    title,    overview,    hero->{ title, body, image{ asset->{ url } } },    skills[]{ "title": coalesce(title, "") },    mediaGallery[]{ title, description, url, image{ asset->{ url } } },    cvSection{ content[], image{ asset->{ url } } },    testimonials[]->{ _id, quote, author, role, portrait{ asset->{ url } } },    "blogPosts": select(      defined(blogPosts) && count(blogPosts) > 0 =>        blogPosts[]->{          _id, _type,          "slug": slug.current,          title,          publishedAt,          publisher,          "coverImage": coverImage.asset->url,          overview,          tags,          externalUrl,          cardVariant        },      *[_type == "blogPost"] | order(coalesce(publishedAt, _createdAt) desc)[0...6]{        _id, _type,        "slug": slug.current,        title,        publishedAt,        publisher,        "coverImage": coverImage.asset->url,        overview,        tags,        externalUrl,        cardVariant      }    )  }
export type HomePageQueryResult = {
  _id: string
  _type: 'home'
  title: string | null
  overview: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  hero: {
    title: string | null
    body: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }> | null
    image: {
      asset: {
        url: string | null
      } | null
    } | null
  } | null
  skills: Array<{
    title: string | ''
  }> | null
  mediaGallery: Array<{
    title: string | null
    description: string | null
    url: string | null
    image: {
      asset: {
        url: string | null
      } | null
    } | null
  }> | null
  cvSection: {
    content: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal'
      listItem?: never
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }> | null
    image: {
      asset: {
        url: string | null
      } | null
    } | null
  } | null
  testimonials: Array<{
    _id: string
    quote: string | null
    author: string | null
    role: string | null
    portrait: {
      asset: {
        url: string | null
      } | null
    } | null
  }> | null
  blogPosts: Array<{
    _id: string
    _type: 'blogPost'
    slug: string | null
    title: string | null
    publishedAt: string | null
    publisher: string | null
    coverImage: string | null
    overview: string | null
    tags: Array<string> | null
    externalUrl: string | null
    cardVariant: 'imageLink' | 'standard' | null
  }> | null
} | null
// Variable: pagesBySlugQuery
// Query: *[_type == "page" && slug.current == $slug][0]{    _id, _type, body, overview, title, "slug": slug.current  }
export type PagesBySlugQueryResult = {
  _id: string
  _type: 'page'
  body: Array<
    | ({
        _key: string
      } & Timeline)
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        alt?: string
        _type: 'image'
        _key: string
      }
  > | null
  overview: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: null
    level?: number
    _type: 'block'
    _key: string
  }> | null
  title: string | null
  slug: string | null
} | null
// Variable: allBlogPostsQuery
// Query: *[_type == "blogPost"] | order(coalesce(publishedAt, _createdAt) desc){    _id, _type,    "slug": slug.current,    title,    publishedAt,    "coverImage": coverImage.asset->url,    overview,    tags,    publisher,    externalUrl  }
export type AllBlogPostsQueryResult = Array<{
  _id: string
  _type: 'blogPost'
  slug: string | null
  title: string | null
  publishedAt: string | null
  coverImage: string | null
  overview: string | null
  tags: Array<string> | null
  publisher: string | null
  externalUrl: string | null
}>
// Variable: blogPostBySlugQuery
// Query: *[_type == "blogPost" && slug.current == $slug][0]{    _id, _type,    title,    publishedAt,    publisher,    "coverImage": coverImage.asset->url,    overview,    body,    "slug": slug.current,    tags  }
export type BlogPostBySlugQueryResult = {
  _id: string
  _type: 'blogPost'
  title: string | null
  publishedAt: string | null
  publisher: string | null
  coverImage: string | null
  overview: string | null
  body: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  slug: string | null
  tags: Array<string> | null
} | null
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    _id, _type, footer, linkedinUrl,    logoLight{ asset->{ url }, alt },    logoDark{ asset->{ url }, alt },    menuItems[]{ _key, ...@->{ _type, "slug": slug.current, title } },    ogImage  }
export type SettingsQueryResult = {
  _id: string
  _type: 'settings'
  footer: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  linkedinUrl: string | null
  logoLight: {
    asset: {
      url: string | null
    } | null
    alt: string | null
  } | null
  logoDark: {
    asset: {
      url: string | null
    } | null
    alt: string | null
  } | null
  menuItems: Array<
    | {
        _key: null
        _type: 'home'
        slug: null
        title: string | null
      }
    | {
        _key: null
        _type: 'page'
        slug: string | null
        title: string | null
      }
  > | null
  ogImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  } | null
} | null
// Variable: slugsByTypeQuery
// Query: *[_type == $type && defined(slug.current)]{ "slug": slug.current }
export type SlugsByTypeQueryResult = Array<{
  slug: string | null
}>

declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "home"][0]{\n    _id,\n    _type,\n    title,\n    overview,\n    hero->{ title, body, image{ asset->{ url } } },\n    skills[]{ "title": coalesce(title, "") },\n    mediaGallery[]{ title, description, url, image{ asset->{ url } } },\n    cvSection{ content[], image{ asset->{ url } } },\n    testimonials[]->{ _id, quote, author, role, portrait{ asset->{ url } } },\n    "blogPosts": select(\n      defined(blogPosts) && count(blogPosts) > 0 =>\n        blogPosts[]->{\n          _id, _type,\n          "slug": slug.current,\n          title,\n          publishedAt,\n          publisher,\n          "coverImage": coverImage.asset->url,\n          overview,\n          tags,\n          externalUrl,\n          cardVariant\n        },\n      *[_type == "blogPost"] | order(coalesce(publishedAt, _createdAt) desc)[0...6]{\n        _id, _type,\n        "slug": slug.current,\n        title,\n        publishedAt,\n        publisher,\n        "coverImage": coverImage.asset->url,\n        overview,\n        tags,\n        externalUrl,\n        cardVariant\n      }\n    )\n  }\n': HomePageQueryResult
    '\n  *[_type == "page" && slug.current == $slug][0]{\n    _id, _type, body, overview, title, "slug": slug.current\n  }\n': PagesBySlugQueryResult
    '\n  *[_type == "blogPost"] | order(coalesce(publishedAt, _createdAt) desc){\n    _id, _type,\n    "slug": slug.current,\n    title,\n    publishedAt,\n    "coverImage": coverImage.asset->url,\n    overview,\n    tags,\n    publisher,\n    externalUrl\n  }\n': AllBlogPostsQueryResult
    '\n  *[_type == "blogPost" && slug.current == $slug][0]{\n    _id, _type,\n    title,\n    publishedAt,\n    publisher,\n    "coverImage": coverImage.asset->url,\n    overview,\n    body,\n    "slug": slug.current,\n    tags\n  }\n': BlogPostBySlugQueryResult
    '\n  *[_type == "settings"][0]{\n    _id, _type, footer, linkedinUrl,\n    logoLight{ asset->{ url }, alt },\n    logoDark{ asset->{ url }, alt },\n    menuItems[]{ _key, ...@->{ _type, "slug": slug.current, title } },\n    ogImage\n  }\n': SettingsQueryResult
    '\n  *[_type == $type && defined(slug.current)]{ "slug": slug.current }\n': SlugsByTypeQueryResult
  }
}
